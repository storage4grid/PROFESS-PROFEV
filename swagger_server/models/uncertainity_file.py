# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.uncertainity_file_ess_states import UncertainityFileESSStates  # noqa: F401,E501
from swagger_server.models.uncertainity_file_plugged_time import UncertainityFilePluggedTime  # noqa: F401,E501
from swagger_server.models.uncertainity_meta import UncertainityMeta  # noqa: F401,E501
from swagger_server import util


class UncertainityFile(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, meta: UncertainityMeta=None, plugged_time: UncertainityFilePluggedTime=None, unplugged_time: UncertainityFilePluggedTime=None, ess_states: UncertainityFileESSStates=None, vac_states: UncertainityFileESSStates=None):  # noqa: E501
        """UncertainityFile - a model defined in Swagger

        :param meta: The meta of this UncertainityFile.  # noqa: E501
        :type meta: UncertainityMeta
        :param plugged_time: The plugged_time of this UncertainityFile.  # noqa: E501
        :type plugged_time: UncertainityFilePluggedTime
        :param unplugged_time: The unplugged_time of this UncertainityFile.  # noqa: E501
        :type unplugged_time: UncertainityFilePluggedTime
        :param ess_states: The ess_states of this UncertainityFile.  # noqa: E501
        :type ess_states: UncertainityFileESSStates
        :param vac_states: The vac_states of this UncertainityFile.  # noqa: E501
        :type vac_states: UncertainityFileESSStates
        """
        self.swagger_types = {
            'meta': UncertainityMeta,
            'plugged_time': UncertainityFilePluggedTime,
            'unplugged_time': UncertainityFilePluggedTime,
            'ess_states': UncertainityFileESSStates,
            'vac_states': UncertainityFileESSStates
        }

        self.attribute_map = {
            'meta': 'meta',
            'plugged_time': 'Plugged_Time',
            'unplugged_time': 'Unplugged_Time',
            'ess_states': 'ESS_States',
            'vac_states': 'VAC_States'
        }

        self._meta = meta
        self._plugged_time = plugged_time
        self._unplugged_time = unplugged_time
        self._ess_states = ess_states
        self._vac_states = vac_states

    @classmethod
    def from_dict(cls, dikt) -> 'UncertainityFile':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The uncertainity_File of this UncertainityFile.  # noqa: E501
        :rtype: UncertainityFile
        """
        return util.deserialize_model(dikt, cls)

    @property
    def meta(self) -> UncertainityMeta:
        """Gets the meta of this UncertainityFile.


        :return: The meta of this UncertainityFile.
        :rtype: UncertainityMeta
        """
        return self._meta

    @meta.setter
    def meta(self, meta: UncertainityMeta):
        """Sets the meta of this UncertainityFile.


        :param meta: The meta of this UncertainityFile.
        :type meta: UncertainityMeta
        """

        self._meta = meta

    @property
    def plugged_time(self) -> UncertainityFilePluggedTime:
        """Gets the plugged_time of this UncertainityFile.


        :return: The plugged_time of this UncertainityFile.
        :rtype: UncertainityFilePluggedTime
        """
        return self._plugged_time

    @plugged_time.setter
    def plugged_time(self, plugged_time: UncertainityFilePluggedTime):
        """Sets the plugged_time of this UncertainityFile.


        :param plugged_time: The plugged_time of this UncertainityFile.
        :type plugged_time: UncertainityFilePluggedTime
        """

        self._plugged_time = plugged_time

    @property
    def unplugged_time(self) -> UncertainityFilePluggedTime:
        """Gets the unplugged_time of this UncertainityFile.


        :return: The unplugged_time of this UncertainityFile.
        :rtype: UncertainityFilePluggedTime
        """
        return self._unplugged_time

    @unplugged_time.setter
    def unplugged_time(self, unplugged_time: UncertainityFilePluggedTime):
        """Sets the unplugged_time of this UncertainityFile.


        :param unplugged_time: The unplugged_time of this UncertainityFile.
        :type unplugged_time: UncertainityFilePluggedTime
        """

        self._unplugged_time = unplugged_time

    @property
    def ess_states(self) -> UncertainityFileESSStates:
        """Gets the ess_states of this UncertainityFile.


        :return: The ess_states of this UncertainityFile.
        :rtype: UncertainityFileESSStates
        """
        return self._ess_states

    @ess_states.setter
    def ess_states(self, ess_states: UncertainityFileESSStates):
        """Sets the ess_states of this UncertainityFile.


        :param ess_states: The ess_states of this UncertainityFile.
        :type ess_states: UncertainityFileESSStates
        """

        self._ess_states = ess_states

    @property
    def vac_states(self) -> UncertainityFileESSStates:
        """Gets the vac_states of this UncertainityFile.


        :return: The vac_states of this UncertainityFile.
        :rtype: UncertainityFileESSStates
        """
        return self._vac_states

    @vac_states.setter
    def vac_states(self, vac_states: UncertainityFileESSStates):
        """Sets the vac_states of this UncertainityFile.


        :param vac_states: The vac_states of this UncertainityFile.
        :type vac_states: UncertainityFileESSStates
        """

        self._vac_states = vac_states
