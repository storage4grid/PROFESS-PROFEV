# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Start(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, repetition: int=None, control_frequency: int=None, horizon_in_steps: int=None, model_name: str=None, solver: str=None, d_t_in_seconds: int=None, optimization_type: str=None, single_ev: bool=False):  # noqa: E501
        """Start - a model defined in Swagger

        :param repetition: The repetition of this Start.  # noqa: E501
        :type repetition: int
        :param control_frequency: The control_frequency of this Start.  # noqa: E501
        :type control_frequency: int
        :param horizon_in_steps: The horizon_in_steps of this Start.  # noqa: E501
        :type horizon_in_steps: int
        :param model_name: The model_name of this Start.  # noqa: E501
        :type model_name: str
        :param solver: The solver of this Start.  # noqa: E501
        :type solver: str
        :param d_t_in_seconds: The d_t_in_seconds of this Start.  # noqa: E501
        :type d_t_in_seconds: int
        :param optimization_type: The optimization_type of this Start.  # noqa: E501
        :type optimization_type: str
        :param single_ev: The single_ev of this Start.  # noqa: E501
        :type single_ev: bool
        """
        self.swagger_types = {
            'repetition': int,
            'control_frequency': int,
            'horizon_in_steps': int,
            'model_name': str,
            'solver': str,
            'd_t_in_seconds': int,
            'optimization_type': str,
            'single_ev': bool
        }

        self.attribute_map = {
            'repetition': 'repetition',
            'control_frequency': 'control_frequency',
            'horizon_in_steps': 'horizon_in_steps',
            'model_name': 'model_name',
            'solver': 'solver',
            'd_t_in_seconds': 'dT_in_seconds',
            'optimization_type': 'optimization_type',
            'single_ev': 'single_ev'
        }

        self._repetition = repetition
        self._control_frequency = control_frequency
        self._horizon_in_steps = horizon_in_steps
        self._model_name = model_name
        self._solver = solver
        self._d_t_in_seconds = d_t_in_seconds
        self._optimization_type = optimization_type
        self._single_ev = single_ev

    @classmethod
    def from_dict(cls, dikt) -> 'Start':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Start of this Start.  # noqa: E501
        :rtype: Start
        """
        return util.deserialize_model(dikt, cls)

    @property
    def repetition(self) -> int:
        """Gets the repetition of this Start.


        :return: The repetition of this Start.
        :rtype: int
        """
        return self._repetition

    @repetition.setter
    def repetition(self, repetition: int):
        """Sets the repetition of this Start.


        :param repetition: The repetition of this Start.
        :type repetition: int
        """
        if repetition is None:
            raise ValueError("Invalid value for `repetition`, must not be `None`")  # noqa: E501

        self._repetition = repetition

    @property
    def control_frequency(self) -> int:
        """Gets the control_frequency of this Start.


        :return: The control_frequency of this Start.
        :rtype: int
        """
        return self._control_frequency

    @control_frequency.setter
    def control_frequency(self, control_frequency: int):
        """Sets the control_frequency of this Start.


        :param control_frequency: The control_frequency of this Start.
        :type control_frequency: int
        """
        if control_frequency is None:
            raise ValueError("Invalid value for `control_frequency`, must not be `None`")  # noqa: E501

        self._control_frequency = control_frequency

    @property
    def horizon_in_steps(self) -> int:
        """Gets the horizon_in_steps of this Start.


        :return: The horizon_in_steps of this Start.
        :rtype: int
        """
        return self._horizon_in_steps

    @horizon_in_steps.setter
    def horizon_in_steps(self, horizon_in_steps: int):
        """Sets the horizon_in_steps of this Start.


        :param horizon_in_steps: The horizon_in_steps of this Start.
        :type horizon_in_steps: int
        """
        if horizon_in_steps is None:
            raise ValueError("Invalid value for `horizon_in_steps`, must not be `None`")  # noqa: E501

        self._horizon_in_steps = horizon_in_steps

    @property
    def model_name(self) -> str:
        """Gets the model_name of this Start.


        :return: The model_name of this Start.
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name: str):
        """Sets the model_name of this Start.


        :param model_name: The model_name of this Start.
        :type model_name: str
        """

        self._model_name = model_name

    @property
    def solver(self) -> str:
        """Gets the solver of this Start.


        :return: The solver of this Start.
        :rtype: str
        """
        return self._solver

    @solver.setter
    def solver(self, solver: str):
        """Sets the solver of this Start.


        :param solver: The solver of this Start.
        :type solver: str
        """

        self._solver = solver

    @property
    def d_t_in_seconds(self) -> int:
        """Gets the d_t_in_seconds of this Start.


        :return: The d_t_in_seconds of this Start.
        :rtype: int
        """
        return self._d_t_in_seconds

    @d_t_in_seconds.setter
    def d_t_in_seconds(self, d_t_in_seconds: int):
        """Sets the d_t_in_seconds of this Start.


        :param d_t_in_seconds: The d_t_in_seconds of this Start.
        :type d_t_in_seconds: int
        """
        if d_t_in_seconds is None:
            raise ValueError("Invalid value for `d_t_in_seconds`, must not be `None`")  # noqa: E501

        self._d_t_in_seconds = d_t_in_seconds

    @property
    def optimization_type(self) -> str:
        """Gets the optimization_type of this Start.


        :return: The optimization_type of this Start.
        :rtype: str
        """
        return self._optimization_type

    @optimization_type.setter
    def optimization_type(self, optimization_type: str):
        """Sets the optimization_type of this Start.


        :param optimization_type: The optimization_type of this Start.
        :type optimization_type: str
        """
        if optimization_type is None:
            raise ValueError("Invalid value for `optimization_type`, must not be `None`")  # noqa: E501

        self._optimization_type = optimization_type

    @property
    def single_ev(self) -> bool:
        """Gets the single_ev of this Start.


        :return: The single_ev of this Start.
        :rtype: bool
        """
        return self._single_ev

    @single_ev.setter
    def single_ev(self, single_ev: bool):
        """Sets the single_ev of this Start.


        :param single_ev: The single_ev of this Start.
        :type single_ev: bool
        """

        self._single_ev = single_ev
