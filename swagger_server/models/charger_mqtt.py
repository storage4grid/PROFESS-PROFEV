# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.source import Source  # noqa: F401,E501
from swagger_server import util


class ChargerMqtt(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, max_charging_power_k_w: float=None, so_c: Source=None, recharge: Source=None):  # noqa: E501
        """ChargerMqtt - a model defined in Swagger

        :param max_charging_power_k_w: The max_charging_power_k_w of this ChargerMqtt.  # noqa: E501
        :type max_charging_power_k_w: float
        :param so_c: The so_c of this ChargerMqtt.  # noqa: E501
        :type so_c: Source
        :param recharge: The recharge of this ChargerMqtt.  # noqa: E501
        :type recharge: Source
        """
        self.swagger_types = {
            'max_charging_power_k_w': float,
            'so_c': Source,
            'recharge': Source
        }

        self.attribute_map = {
            'max_charging_power_k_w': 'Max_Charging_Power_kW',
            'so_c': 'SoC',
            'recharge': 'recharge'
        }

        self._max_charging_power_k_w = max_charging_power_k_w
        self._so_c = so_c
        self._recharge = recharge

    @classmethod
    def from_dict(cls, dikt) -> 'ChargerMqtt':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The charger_mqtt of this ChargerMqtt.  # noqa: E501
        :rtype: ChargerMqtt
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_charging_power_k_w(self) -> float:
        """Gets the max_charging_power_k_w of this ChargerMqtt.


        :return: The max_charging_power_k_w of this ChargerMqtt.
        :rtype: float
        """
        return self._max_charging_power_k_w

    @max_charging_power_k_w.setter
    def max_charging_power_k_w(self, max_charging_power_k_w: float):
        """Sets the max_charging_power_k_w of this ChargerMqtt.


        :param max_charging_power_k_w: The max_charging_power_k_w of this ChargerMqtt.
        :type max_charging_power_k_w: float
        """

        self._max_charging_power_k_w = max_charging_power_k_w

    @property
    def so_c(self) -> Source:
        """Gets the so_c of this ChargerMqtt.


        :return: The so_c of this ChargerMqtt.
        :rtype: Source
        """
        return self._so_c

    @so_c.setter
    def so_c(self, so_c: Source):
        """Sets the so_c of this ChargerMqtt.


        :param so_c: The so_c of this ChargerMqtt.
        :type so_c: Source
        """

        self._so_c = so_c

    @property
    def recharge(self) -> Source:
        """Gets the recharge of this ChargerMqtt.


        :return: The recharge of this ChargerMqtt.
        :rtype: Source
        """
        return self._recharge

    @recharge.setter
    def recharge(self, recharge: Source):
        """Sets the recharge of this ChargerMqtt.


        :param recharge: The recharge of this ChargerMqtt.
        :type recharge: Source
        """

        self._recharge = recharge
