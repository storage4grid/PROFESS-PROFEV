# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.ess_output import ESSOutput  # noqa: F401,E501
from swagger_server.models.generic_output import GenericOutput  # noqa: F401,E501
from swagger_server.models.grid_output import GridOutput  # noqa: F401,E501
from swagger_server.models.pv_output import PVOutput  # noqa: F401,E501
from swagger_server import util


class OutputSource(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, generic: GenericOutput=None, photovoltaic: PVOutput=None, ess: ESSOutput=None, grid: GridOutput=None):  # noqa: E501
        """OutputSource - a model defined in Swagger

        :param generic: The generic of this OutputSource.  # noqa: E501
        :type generic: GenericOutput
        :param photovoltaic: The photovoltaic of this OutputSource.  # noqa: E501
        :type photovoltaic: PVOutput
        :param ess: The ess of this OutputSource.  # noqa: E501
        :type ess: ESSOutput
        :param grid: The grid of this OutputSource.  # noqa: E501
        :type grid: GridOutput
        """
        self.swagger_types = {
            'generic': GenericOutput,
            'photovoltaic': PVOutput,
            'ess': ESSOutput,
            'grid': GridOutput
        }

        self.attribute_map = {
            'generic': 'generic',
            'photovoltaic': 'photovoltaic',
            'ess': 'ESS',
            'grid': 'grid'
        }

        self._generic = generic
        self._photovoltaic = photovoltaic
        self._ess = ess
        self._grid = grid

    @classmethod
    def from_dict(cls, dikt) -> 'OutputSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OutputSource of this OutputSource.  # noqa: E501
        :rtype: OutputSource
        """
        return util.deserialize_model(dikt, cls)

    @property
    def generic(self) -> GenericOutput:
        """Gets the generic of this OutputSource.


        :return: The generic of this OutputSource.
        :rtype: GenericOutput
        """
        return self._generic

    @generic.setter
    def generic(self, generic: GenericOutput):
        """Sets the generic of this OutputSource.


        :param generic: The generic of this OutputSource.
        :type generic: GenericOutput
        """

        self._generic = generic

    @property
    def photovoltaic(self) -> PVOutput:
        """Gets the photovoltaic of this OutputSource.


        :return: The photovoltaic of this OutputSource.
        :rtype: PVOutput
        """
        return self._photovoltaic

    @photovoltaic.setter
    def photovoltaic(self, photovoltaic: PVOutput):
        """Sets the photovoltaic of this OutputSource.


        :param photovoltaic: The photovoltaic of this OutputSource.
        :type photovoltaic: PVOutput
        """

        self._photovoltaic = photovoltaic

    @property
    def ess(self) -> ESSOutput:
        """Gets the ess of this OutputSource.


        :return: The ess of this OutputSource.
        :rtype: ESSOutput
        """
        return self._ess

    @ess.setter
    def ess(self, ess: ESSOutput):
        """Sets the ess of this OutputSource.


        :param ess: The ess of this OutputSource.
        :type ess: ESSOutput
        """

        self._ess = ess

    @property
    def grid(self) -> GridOutput:
        """Gets the grid of this OutputSource.


        :return: The grid of this OutputSource.
        :rtype: GridOutput
        """
        return self._grid

    @grid.setter
    def grid(self, grid: GridOutput):
        """Sets the grid of this OutputSource.


        :param grid: The grid of this OutputSource.
        :type grid: GridOutput
        """

        self._grid = grid
